#include<bits/stdc++.h>

using namespace std;
struct process
{
	  int psize;/*each process size   */
	  int burst; // cpu time
	  int st; // starting time
	  int et; // ending time
	  int index;      //stores the occupied memory block id
} p[30];

struct memory
{
	  int bsize;// each block size in memory
	  int rem; // remaining size
	  bool filled; // whether block is occupied or not
} m[20];



int main()
{

	int nop,nom;// number of process and number of memory blocks


	  cout<<"Enter number of memory blocks\n " ;
	cin>>nom;
	cout<<"Enter sizes of each block\n";
	for(int i=0; i<nom; ++i)
	{
		cin>>m[i].bsize;
		m[i].rem=m[i].bsize; // initially,all blocks are empty
		m[i].filled=false;
	}

	 cout<<"Enter no. of processes: ";
	cin>>nop;
	  cout<<"Enter cpu time and sizes for each process\n";
	for(int i=0; i<nop; ++i)
	{
		cin>>p[i].burst>>p[i].psize;
		p[i].et=-1;
	}

    int sofar=0, t;// sofar- how many processes so far have been loaded in the memory and t for each cpu time

    int count=0; // how many processes  size < any of block size

    for(int i=0; i<nop; ++i)
    {
    	 for(int k=0; k<nom; ++k)
    	 {
    	 	if(p[i].psize<m[k].bsize)
    	 	{
    	 		count ++;
    	 		break;
    	 	}
    	 }

    }
    printf("\n\n total the processes can be executed : %d\n\n", count);

t=0;
while(sofar<count)
    {
        printf(" at t= %d\n ",t);
        // first release memory if some process has finished execution till t
         for(int i=0; i<nop; ++i)
         {
             if(p[i].et==t)
             {
            m[p[i].index].rem=m[p[i].index].bsize; // restore the initial block size



                m[p[i].index].filled=false; // empty again
             }
         }
         for(int i=0; i<nop; ++i)
         {
             if(p[i].et==-1) // the processes that not have been loaded so far
             {
                for(int k=0; k<nom; ++k)
                {
                   if(m[k].filled==false && m[k].rem>=p[i].psize) // large enough to hold
                   {
                    sofar ++; // one more process has been loaded
                     p[i].st=t;
                     p[i].et=t+p[i].burst;
                     m[k].rem-=p[i].psize;
                     p[i].index=k; // store the index of occupied block
              //       cout<<"J "<<i+1<<" -> M"<<k+1<<"\n";
                     m[k].filled=true;

                     break;
                   }
                }
             }
         }
         int ifr=0;// internal fragmentation
         int waitqlength=nop-sofar;

         cout<<"Block    Remaining\n";
         for(int k=0; k<nom; ++k)
         {
             ifr+=m[k].rem;
             printf(" m[%d]  %d  \n", k,m[k].rem);
         }

         cout<<"Waiting Queue Length= "<<waitqlength<<"\n";
         cout<<"Internal Fragmentation= "<<ifr<<"\n\n";
         ++t;
    }
    cout<<"\n\n";
    cout<<"Waiting Time\n";
    int tt=-1;
    for(int i=0; i<nop; ++i)
    {
tt=(tt>p[i].et)?tt:p[i].et; // find the maximum end time of process
        printf(" j[%i] ",i);
        if(p[i].et!=-1)
         cout<<p[i].st<<"\n";
         else
            printf(" not done\n");

    }

    cout<<"total time: "<<tt<<"\n";
    cout<<"Throughput: "<<(float)count/tt;

    return 0;
}
